#!/usr/bin/env python
# -*- coding: utf-8 -*-

import re, sys, os, time
from copy import copy
from subprocess import Popen, PIPE
from collections import defaultdict
from os.path import join, isfile, normpath, samefile
from optparse import OptionParser

linktypes = ['DBF_INLINK', 'DBF_OUTLINK', 'DBF_FWDLINK']
infofields = ['EGU', 'DESC']

parser = OptionParser()
parser.add_option("-I", dest='include', action='append', default=[],
                  help='Add to search path', metavar='PATH')
parser.add_option("-o", '--output',
                  help='Output file', metavar='FILE')

opts, args = parser.parse_args()

if 'DISPLAY' not in os.environ:
    print >>sys.stderr,"DISPLAY not set\nThis script runs EDM, which needs a running X server"
    sys.exit(1)

if opts.output is None:
    out=sys.stdout
else:
    out=file(opts.output, 'w')

if len(opts.include)==0:
    opts.include=['.']

# locate files
inputs=[]
for fname in args:
    fpath=None
    for p in opts.include:
        fp=normpath(join(p,fname))
        if isfile(fp):
            fpath=fp
            break
        
    if fpath is None:
        print >>sys.stderr, "Can't find",fname,"in",', '.join(opts.include)
        sys.exit(1)

    inputs.append(fpath)

# identify macros

mac=re.compile("\$\(([^\)]*)\)")

names=set()
for i in inputs:
    with open(i, 'rU') as fp:
        found = mac.findall(fp.read())

        map(names.add, found)

#print 'Found macros:',', '.join(names)

# build: NAME=$(NAME), ...
macros = ','.join(map(lambda m:'%s=$(%s)'%(m,m), names))

#print macros

cmd = ['edm', '-m', macros, '-crawl'] + inputs

#print >>sys.stderr, ' '.join(cmd)

procenv = copy(os.environ)
if 'EDMDATAFILES' in procenv:
    # only find files listed on the command line
    del procenv['EDMDATAFILES']

def cleanLink(val):
    val=val.strip()
    v,_,_=val.partition('.')
    #v,_,_=v.partition(' ')
    #v=v.replace("'","")
    return v.strip()

proc = Popen(cmd, env=procenv, stdout=PIPE)

# TODO make tolerant of changes
edmpat = re.compile('.*file="([^"]*)",pv="([^"]*)"')

result = defaultdict(list)

for ent in proc.stdout.readlines():
    L = ent.strip()
    if len(L)==0:
        break
    M = edmpat.match(L)
    if M is None:
        print '???',L
        continue

    src, macro = M.groups()
    macro = cleanLink(macro)

    fnd = False
    for n in inputs:
        if samefile(n,src):
            fnd=True
            result[macro].append(n)

    if not fnd:
        print 'Macro',macro,'from unknown file',src

proc.wait()

print >>out,"""msgid ""
msgstr ""
"Project-Id-Version: \\n"
"POT-Creation-Date: %(time)s\\n"
"PO-Revision-Date: %(time)s\\n"
"Last-Translator: \\n"
"Language-Team: \\n"
"Language: \\n"
"MIME-Version: 1.0\\n"
"Content-Type: text/plain; charset=iso-8859-1\\n"
"Content-Transfer-Encoding: 8bit\\n" """ % {'time':time.strftime('%F %H:%M%z')}

for n,d in enumerate(opts.include):
    print >>out,'"X-Poedit-SearchPath-%d: %s\\n"'%(n,d)
print >>out

mlist = result.keys()
mlist.sort()

for macro in mlist:
    files = result[macro]

    for F in files:
        print >>out,'#:',F

    
    print >>out,'msgid "%s"'%macro
    print >>out,'msgstr ""'
    print >>out
